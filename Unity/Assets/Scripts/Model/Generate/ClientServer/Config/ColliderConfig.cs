
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace ET
{
    [EnableClass]
    public sealed partial class ColliderConfig : BeanBase
    {
        public ColliderConfig(ByteBuf _buf)
        {
            Id = _buf.ReadInt();
            ColliderType = (EColliderType)_buf.ReadInt();
            Desc = _buf.ReadString();
            IsSensor = _buf.ReadBool();
            Offset = ExternalTypeUtil.NewVector2(vector2.Deserializevector2(_buf));
            Radius = _buf.ReadFloat();
            HX = _buf.ReadFloat();
            HY = _buf.ReadFloat();
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FinalPoints = new System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Vector2>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<System.Numerics.Vector2> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<System.Numerics.Vector2>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { System.Numerics.Vector2 _e1;  _e1 = ExternalTypeUtil.NewVector2(vector2.Deserializevector2(_buf)); _e0.Add(_e1);}} FinalPoints.Add(_e0);}}

            PostInit();
        }

        public static ColliderConfig DeserializeColliderConfig(ByteBuf _buf)
        {
            return new ColliderConfig(_buf);
        }

        /// <summary>
        /// Id
        /// </summary>
        public readonly int Id;

        /// <summary>
        /// 碰撞体类型类型
        /// </summary>
        public readonly EColliderType ColliderType;

        /// <summary>
        /// 描述
        /// </summary>
        public readonly string Desc;

        /// <summary>
        /// 是否为触发器
        /// </summary>
        public readonly bool IsSensor;

        /// <summary>
        /// 偏移
        /// </summary>
        public readonly System.Numerics.Vector2 Offset;

        /// <summary>
        /// 半径
        /// </summary>
        public readonly float Radius;

        /// <summary>
        /// x轴方向上的一半长度
        /// </summary>
        public readonly float HX;

        /// <summary>
        /// Y轴方向上的一半长度
        /// </summary>
        public readonly float HY;

        /// <summary>
        /// 碰撞体所包含的顶点信息(顺时针),可能由多个多边形组成
        /// </summary>
        public readonly System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Vector2>> FinalPoints;


        public const int __ID__ = -1222308746;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef()
        {
            
            
            
            
            
            
            
            
            
        }

        public override string ToString()
        {
            return "{ "
            + "Id:" + Id + ","
            + "ColliderType:" + ColliderType + ","
            + "Desc:" + Desc + ","
            + "IsSensor:" + IsSensor + ","
            + "Offset:" + Offset + ","
            + "Radius:" + Radius + ","
            + "HX:" + HX + ","
            + "HY:" + HY + ","
            + "FinalPoints:" + Luban.StringUtil.CollectionToString(FinalPoints) + ","
            + "}";
        }

        partial void PostInit();
    }
}
