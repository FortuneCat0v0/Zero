//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System;


namespace ET
{

public sealed partial class SkillConfig: Bright.Config.BeanBase
{
    public SkillConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Level = _buf.ReadInt();
        SkillAbstractType = (ESkillAbstractType)_buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        CD = _buf.ReadInt();
        Life = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AEsServer = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); AEsServer.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AEParamsServer = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<int> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); _e0.Add(_e1);}} AEParamsServer.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AETriggerPercentServer = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); AETriggerPercentServer.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AEsClient = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); AEsClient.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AEParamsClient = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<int> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); _e0.Add(_e1);}} AEParamsClient.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AETriggerPercentClient = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); AETriggerPercentClient.Add(_e0);}}
        SkillIndicatorType = (ESkillIndicatorType)_buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SkillIndicatorParams = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); SkillIndicatorParams.Add(_e0);}}
        PostInit();
    }

    public static SkillConfig DeserializeSkillConfig(ByteBuf _buf)
    {
        return new SkillConfig(_buf);
    }

    /// <summary>
    /// Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 技能等级
    /// </summary>
    public int Level { get; private set; }
    /// <summary>
    /// 技能抽象类型
    /// </summary>
    public ESkillAbstractType SkillAbstractType { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 冷却时间(毫秒)
    /// </summary>
    public int CD { get; private set; }
    /// <summary>
    /// 技能执行时间(毫秒)
    /// </summary>
    public int Life { get; private set; }
    /// <summary>
    /// 行为事件(服务端)
    /// </summary>
    public System.Collections.Generic.List<string> AEsServer { get; private set; }
    /// <summary>
    /// 行为事件参数(服务端)
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> AEParamsServer { get; private set; }
    /// <summary>
    /// 行为事件触发百分比(服务端)
    /// </summary>
    public System.Collections.Generic.List<int> AETriggerPercentServer { get; private set; }
    /// <summary>
    /// 行为事件(客户端)
    /// </summary>
    public System.Collections.Generic.List<string> AEsClient { get; private set; }
    /// <summary>
    /// 行为事件参数(客户端)
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> AEParamsClient { get; private set; }
    /// <summary>
    /// 行为事件触发百分比(客户端)
    /// </summary>
    public System.Collections.Generic.List<int> AETriggerPercentClient { get; private set; }
    /// <summary>
    /// 技能指示器类型
    /// </summary>
    public ESkillIndicatorType SkillIndicatorType { get; private set; }
    /// <summary>
    /// 技能指示器参数
    /// </summary>
    public System.Collections.Generic.List<float> SkillIndicatorParams { get; private set; }

    public const int __ID__ = -844226349;
    public override int GetTypeId() => __ID__;

    public  void Resolve(ConcurrentDictionary<Type, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Level:" + Level + ","
        + "SkillAbstractType:" + SkillAbstractType + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "CD:" + CD + ","
        + "Life:" + Life + ","
        + "AEsServer:" + Bright.Common.StringUtil.CollectionToString(AEsServer) + ","
        + "AEParamsServer:" + Bright.Common.StringUtil.CollectionToString(AEParamsServer) + ","
        + "AETriggerPercentServer:" + Bright.Common.StringUtil.CollectionToString(AETriggerPercentServer) + ","
        + "AEsClient:" + Bright.Common.StringUtil.CollectionToString(AEsClient) + ","
        + "AEParamsClient:" + Bright.Common.StringUtil.CollectionToString(AEParamsClient) + ","
        + "AETriggerPercentClient:" + Bright.Common.StringUtil.CollectionToString(AETriggerPercentClient) + ","
        + "SkillIndicatorType:" + SkillIndicatorType + ","
        + "SkillIndicatorParams:" + Bright.Common.StringUtil.CollectionToString(SkillIndicatorParams) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}