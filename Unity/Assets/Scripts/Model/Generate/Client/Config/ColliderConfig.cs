//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System;


namespace ET
{

public sealed partial class ColliderConfig: Bright.Config.BeanBase
{
    public ColliderConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        ColliderType = (EColliderType)_buf.ReadInt();
        Desc = _buf.ReadString();
        IsSensor = _buf.ReadBool();
        Offset = _buf.ReadVector2();
        Radius = _buf.ReadFloat();
        HX = _buf.ReadFloat();
        HY = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FinalPoints = new System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Vector2>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<System.Numerics.Vector2> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<System.Numerics.Vector2>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { System.Numerics.Vector2 _e1;  _e1 = _buf.ReadVector2(); _e0.Add(_e1);}} FinalPoints.Add(_e0);}}
        PostInit();
    }

    public static ColliderConfig DeserializeColliderConfig(ByteBuf _buf)
    {
        return new ColliderConfig(_buf);
    }

    /// <summary>
    /// Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 碰撞体类型类型
    /// </summary>
    public EColliderType ColliderType { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 是否为触发器
    /// </summary>
    public bool IsSensor { get; private set; }
    /// <summary>
    /// 偏移
    /// </summary>
    public System.Numerics.Vector2 Offset { get; private set; }
    /// <summary>
    /// 半径
    /// </summary>
    public float Radius { get; private set; }
    /// <summary>
    /// x轴方向上的一半长度
    /// </summary>
    public float HX { get; private set; }
    /// <summary>
    /// Y轴方向上的一半长度
    /// </summary>
    public float HY { get; private set; }
    /// <summary>
    /// 碰撞体所包含的顶点信息(顺时针),可能由多个多边形组成
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<System.Numerics.Vector2>> FinalPoints { get; private set; }

    public const int __ID__ = -1222308746;
    public override int GetTypeId() => __ID__;

    public  void Resolve(ConcurrentDictionary<Type, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ColliderType:" + ColliderType + ","
        + "Desc:" + Desc + ","
        + "IsSensor:" + IsSensor + ","
        + "Offset:" + Offset + ","
        + "Radius:" + Radius + ","
        + "HX:" + HX + ","
        + "HY:" + HY + ","
        + "FinalPoints:" + Bright.Common.StringUtil.CollectionToString(FinalPoints) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}