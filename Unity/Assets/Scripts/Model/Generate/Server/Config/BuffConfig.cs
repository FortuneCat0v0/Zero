//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System;


namespace ET
{

public sealed partial class BuffConfig: Bright.Config.BeanBase
{
    public BuffConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Desc = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);StartAEs = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); StartAEs.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);StartAEParams = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<int> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); _e0.Add(_e1);}} StartAEParams.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);EndAEs = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); EndAEs.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);EndAEParams = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<int> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); _e0.Add(_e1);}} EndAEParams.Add(_e0);}}
        Duration = _buf.ReadInt();
        TriggerInterval = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);IntervalAEs = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); IntervalAEs.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);IntervalAEParams = new System.Collections.Generic.List<System.Collections.Generic.List<int>>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { System.Collections.Generic.List<int> _e0;  {int n1 = System.Math.Min(_buf.ReadSize(), _buf.Size);_e0 = new System.Collections.Generic.List<int>(n1);for(var i1 = 0 ; i1 < n1 ; i1++) { int _e1;  _e1 = _buf.ReadInt(); _e0.Add(_e1);}} IntervalAEParams.Add(_e0);}}
        MaxLayer = _buf.ReadInt();
        Goup = _buf.ReadInt();
        PostInit();
    }

    public static BuffConfig DeserializeBuffConfig(ByteBuf _buf)
    {
        return new BuffConfig(_buf);
    }

    /// <summary>
    /// buffID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 备注
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 开始事件
    /// </summary>
    public System.Collections.Generic.List<string> StartAEs { get; private set; }
    /// <summary>
    /// 开始事件参数
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> StartAEParams { get; private set; }
    /// <summary>
    /// 结束事件
    /// </summary>
    public System.Collections.Generic.List<string> EndAEs { get; private set; }
    /// <summary>
    /// 结束事件参数
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> EndAEParams { get; private set; }
    /// <summary>
    /// 持续时间
    /// </summary>
    public int Duration { get; private set; }
    /// <summary>
    /// 触发间隔
    /// </summary>
    public int TriggerInterval { get; private set; }
    /// <summary>
    /// 间隔事件
    /// </summary>
    public System.Collections.Generic.List<string> IntervalAEs { get; private set; }
    /// <summary>
    /// 间隔事件参数
    /// </summary>
    public System.Collections.Generic.List<System.Collections.Generic.List<int>> IntervalAEParams { get; private set; }
    /// <summary>
    /// 最大叠加层数
    /// </summary>
    public int MaxLayer { get; private set; }
    /// <summary>
    /// 分组
    /// </summary>
    public int Goup { get; private set; }

    public const int __ID__ = -1370631787;
    public override int GetTypeId() => __ID__;

    public  void Resolve(ConcurrentDictionary<Type, IConfigSingleton> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "StartAEs:" + Bright.Common.StringUtil.CollectionToString(StartAEs) + ","
        + "StartAEParams:" + Bright.Common.StringUtil.CollectionToString(StartAEParams) + ","
        + "EndAEs:" + Bright.Common.StringUtil.CollectionToString(EndAEs) + ","
        + "EndAEParams:" + Bright.Common.StringUtil.CollectionToString(EndAEParams) + ","
        + "Duration:" + Duration + ","
        + "TriggerInterval:" + TriggerInterval + ","
        + "IntervalAEs:" + Bright.Common.StringUtil.CollectionToString(IntervalAEs) + ","
        + "IntervalAEParams:" + Bright.Common.StringUtil.CollectionToString(IntervalAEParams) + ","
        + "MaxLayer:" + MaxLayer + ","
        + "Goup:" + Goup + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}